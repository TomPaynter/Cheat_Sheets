// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: partbook.proto

#ifndef PROTOBUF_partbook_2eproto__INCLUDED
#define PROTOBUF_partbook_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace tutorial {
class Part;
class PartDefaultTypeInternal;
extern PartDefaultTypeInternal _Part_default_instance_;
}  // namespace tutorial

namespace tutorial {

namespace protobuf_partbook_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_partbook_2eproto

// ===================================================================

class Part : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:tutorial.Part) */ {
 public:
  Part();
  virtual ~Part();

  Part(const Part& from);

  inline Part& operator=(const Part& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Part& default_instance();

  static inline const Part* internal_default_instance() {
    return reinterpret_cast<const Part*>(
               &_Part_default_instance_);
  }

  void Swap(Part* other);

  // implements Message ----------------------------------------------

  inline Part* New() const PROTOBUF_FINAL { return New(NULL); }

  Part* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Part& from);
  void MergeFrom(const Part& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Part* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string vendor = 3;
  bool has_vendor() const;
  void clear_vendor();
  static const int kVendorFieldNumber = 3;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  #if LANG_CXX11
  void set_vendor(::std::string&& value);
  #endif
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // required int32 partid = 2;
  bool has_partid() const;
  void clear_partid();
  static const int kPartidFieldNumber = 2;
  ::google::protobuf::int32 partid() const;
  void set_partid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.Part)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_partid();
  void clear_has_partid();
  void set_has_vendor();
  void clear_has_vendor();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  ::google::protobuf::int32 partid_;
  friend struct protobuf_partbook_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Part

// required string name = 1;
inline bool Part::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Part::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Part::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Part::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Part::name() const {
  // @@protoc_insertion_point(field_get:tutorial.Part.name)
  return name_.GetNoArena();
}
inline void Part::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Part.name)
}
#if LANG_CXX11
inline void Part::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Part.name)
}
#endif
inline void Part::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Part.name)
}
inline void Part::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Part.name)
}
inline ::std::string* Part::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tutorial.Part.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Part::release_name() {
  // @@protoc_insertion_point(field_release:tutorial.Part.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Part::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Part.name)
}

// required int32 partid = 2;
inline bool Part::has_partid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Part::set_has_partid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Part::clear_has_partid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Part::clear_partid() {
  partid_ = 0;
  clear_has_partid();
}
inline ::google::protobuf::int32 Part::partid() const {
  // @@protoc_insertion_point(field_get:tutorial.Part.partid)
  return partid_;
}
inline void Part::set_partid(::google::protobuf::int32 value) {
  set_has_partid();
  partid_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Part.partid)
}

// optional string vendor = 3;
inline bool Part::has_vendor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Part::set_has_vendor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Part::clear_has_vendor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Part::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vendor();
}
inline const ::std::string& Part::vendor() const {
  // @@protoc_insertion_point(field_get:tutorial.Part.vendor)
  return vendor_.GetNoArena();
}
inline void Part::set_vendor(const ::std::string& value) {
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Part.vendor)
}
#if LANG_CXX11
inline void Part::set_vendor(::std::string&& value) {
  set_has_vendor();
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Part.vendor)
}
#endif
inline void Part::set_vendor(const char* value) {
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Part.vendor)
}
inline void Part::set_vendor(const char* value, size_t size) {
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Part.vendor)
}
inline ::std::string* Part::mutable_vendor() {
  set_has_vendor();
  // @@protoc_insertion_point(field_mutable:tutorial.Part.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Part::release_vendor() {
  // @@protoc_insertion_point(field_release:tutorial.Part.vendor)
  clear_has_vendor();
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Part::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    set_has_vendor();
  } else {
    clear_has_vendor();
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Part.vendor)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_partbook_2eproto__INCLUDED
